{"version":3,"sources":["components/Tile/Tile.jsx","components/Board/Board.jsx","useLocalStorage.js","boardLogic.js","helpers.js","components/Game/Game.jsx","App.js","index.js"],"names":["pickColour","num","Tile","className","style","background","color","fontSize","Board","data","score","onClickNewGame","onClick","map","row","rowIndex","index","useLocalStorage","key","initialValue","useState","item","window","localStorage","getItem","JSON","parse","error","console","log","storedValue","setStoredValue","value","valueToStore","Function","setItem","stringify","flipMatrix","matrix","column","rotateRight","reverse","rotateLeft","getNewPosition","Math","floor","random","Game","overlay","onClickKeepGoing","App","INITIAL_DATA","WIN","GAME_OVER","PLAYING","setData","setScore","gameOver","setGameOver","restart","setRestart","win","setWin","history","setHistory","scorelist","setScoreList","setOverlay","initBoard","board","cloneDeep","placeRandom","useEffect","newGrid","rand1","rand2","boardMoved","original","updated","flatted","concat","apply","shiftLeft","arr","result","filter","Boolean","slice","i","length","handleLeft","checkDead","oldData","newData","includes","checkForGameOver","shiftRight","handleRight","handleUp","handleDown","handleKeyDown","event","keyCode","addEventListener","removeEventListener","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7df2fd6f.chunk.js","sourcesContent":["import React from 'react';\nimport './Tile.scss';\n\nconst pickColour = (num) => {\n\tswitch (num) {\n\t\tcase 2: return '#eee4da';\n\t\tcase 4: return '#ede0c8';\n\t\tcase 8: return '#f2b179';\n\t\tcase 16: return '#f59563';\n\t\tcase 32: return '#f67c5f';\n\t\tcase 64: return ' #f65e3b';\n\t\tcase 128: return '#edcf72';\n\t\tcase 256: return '#edcc61';\n\t\tcase 512: return '#edc850';\n\t\tcase 1024: return '#edc53f';\n\t\tcase 2048: return '#edc22e';\n\t\tdefault: return '#C2B3A3';\n\t}\n}\n\nexport const Tile = ({ num }) => {\n\treturn (\n\t\t<div\n\t\t\tclassName='tile'\n\t\t\tstyle={{\n\t\t\t\tbackground: pickColour(num),\n\t\t\t\tcolor: num === 2 || num === 4 ? \"#645B52\" : \"#F7F4EF\",\n\t\t\t\tfontSize: num > 512 ? '35px' : '45px',\n\t\t\t}}\n\t\t>\n\t\t\t{num ? num : ''}\n\t\t</div>\n\t)\n}\n","import React from 'react';\r\nimport { Tile } from '../Tile/Tile';\r\nimport './Board.scss';\r\n\r\nexport const Board = ({\r\n\tdata,\r\n\tscore,\r\n\tonClickNewGame\r\n}) => {\r\n\treturn (\r\n\t\t<div className=\"board\">\r\n\t\t\t<div className='game'>\r\n\t\t\t\t<div className='game-group'>\r\n\t\t\t\t\t<h1 className='game-title'>2048</h1>\r\n\t\t\t\t\t<div className='game-score-container'>\r\n\t\t\t\t\t\t<div className='game-score-box'>\r\n\t\t\t\t\t\t\t<span className='game-score-box--current'>SCORE</span>\r\n\t\t\t\t\t\t\t<span>{score}</span>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<button\r\n\t\t\t\t\t\tclassName='game-refresh'\r\n\t\t\t\t\t\t\tonClick={() => {\r\n\t\t\t\t\t\t\t\tonClickNewGame()\r\n\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\tRestart\r\n\t\t\t\t\t\t</button>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t<div className='board-body'>\r\n\t\t\t\t{data.map((row, rowIndex) => {\r\n\t\t\t\t\treturn (\r\n\t\t\t\t\t\t<div key={rowIndex} className='board-row'>\r\n\t\t\t\t\t\t\t{row.map((num, index) => (\r\n\t\t\t\t\t\t\t\t<Tile num={num} key={index} />\r\n\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t);\r\n\t\t\t\t})}\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t)\r\n}\r\n","import { useState } from 'react';\r\n\r\nfunction useLocalStorage(key, initialValue) {\r\n\tconst [storedValue, setStoredValue] = useState(() => {\r\n\t\ttry {\r\n\r\n\t\tconst item = window.localStorage.getItem(key);\r\n\r\n\t\treturn item ? JSON.parse(item) : initialValue;\r\n\t} catch (error) {\r\n\r\n\t\tconsole.log(error);\r\n\t\treturn initialValue;\r\n\t}\r\n});\r\n\r\nconst setValue = value => {\r\n\ttry {\r\n\t\tconst valueToStore =\r\n\t\t\tvalue instanceof Function ? value(storedValue) : value;\r\n\r\n\t\tsetStoredValue(valueToStore);\r\n\r\n\t\twindow.localStorage.setItem(key, JSON.stringify(valueToStore));\r\n\t} catch (error) {\r\n\t\tconsole.log(error);\r\n\t\t}\r\n\t};\r\n\treturn [storedValue, setValue];\r\n}\r\n\r\nexport default useLocalStorage;\r\n","const flipMatrix = matrix => (\r\n\tmatrix[0].map((column, index) => (\r\n\t\tmatrix.map(row => row[index])\r\n\t))\r\n);\r\n\r\nexport const rotateRight = matrix => {\r\n    return flipMatrix(matrix.reverse())\r\n};\r\n\r\nexport const rotateLeft = matrix => {\r\n    return flipMatrix(matrix).reverse()\r\n};\r\n","const getNewPosition = () => {\r\n    const rowPosition = Math.floor(Math.random() * 4);\r\n    const colPosition = Math.floor(Math.random() * 4);\r\n    return [rowPosition, colPosition];\r\n};\r\n\r\n\r\nexport default getNewPosition;\r\n","import React from 'react'\r\nimport './Game.scss'\r\n\r\n\r\nexport const Game = ({\r\n\tonClickNewGame,\r\n\toverlay,\r\n\tonClickKeepGoing\r\n}) => {\r\n\tconst overlayPicker = () => {\r\n\t\tif (overlay === 'playing') {\r\n\t\t\treturn 'gameoverlay__none'\r\n\t\t} if (overlay === ('win' || 'gameover')) {\r\n\t\t\treturn 'gameoverlay'\r\n\t\t}\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div className={overlayPicker()}>\r\n\t\t\t{overlay === 'win' &&\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<h1 className=\"gameoverlay__message\">You Win!</h1>\r\n\t\t\t\t\t<button className=\"gameoverlay__button\" onClick={onClickKeepGoing}>Keep Going!</button>\r\n\t\t\t\t</div>}\r\n\t\t\t{overlay === 'gameover' &&\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<h1 className=\"gameoverlay__message\">GAME OVER!</h1>\r\n\t\t\t\t\t<button className=\"gameoverlay__button\" onClick={onClickNewGame}>Try again!</button>\r\n\t\t\t\t</div>}\r\n\t\t</div>\r\n\t)\r\n}\r\n","import React, { useEffect } from 'react';\nimport { Board } from './components/Board/Board';\nimport useLocalStorage from './useLocalStorage';\nimport cloneDeep from 'lodash/cloneDeep';\nimport { rotateLeft, rotateRight } from './boardLogic';\nimport getNewPosition from './helpers';\nimport './App.scss';\nimport { Game } from './components/Game/Game';\n\nfunction App() {\n  const INITIAL_DATA = [\n    [null, null, null, null],\n    [null, null, null, null],\n    [null, null, null, null],\n    [null, null, null, null],\n  ]\n  const WIN = 'win';\n  const GAME_OVER = 'gameover';\n  const PLAYING = 'playing';\n\n  const [data, setData] = useLocalStorage(\"initial\", INITIAL_DATA);\n  const [score, setScore] = useLocalStorage(\"score\", 0);\n  const [gameOver, setGameOver] = useLocalStorage(\"gameover\", false);\n  const [restart, setRestart] = useLocalStorage(\"restart\", true);\n  const [win, setWin] = useLocalStorage(\"win\", false);\n  const [history, setHistory] = useLocalStorage(\"history\", []);\n  const [scorelist, setScoreList] = useLocalStorage(\"scorelist\", []);\n  const [overlay, setOverlay] = useLocalStorage(\"overlay\", PLAYING);\n\n  const initBoard = () => {\n    let board = cloneDeep(data);\n    placeRandom(board);\n    placeRandom(board);\n    setData(board);\n    setRestart(false);\n  };\n\n  useEffect(() => {\n    if (restart) {\n      initBoard();\n    } // eslint-disable-next-line\n  }, [restart]);\n\n  const placeRandom = (newGrid) => {\n    let [rand1, rand2] = getNewPosition(newGrid);\n    while (newGrid[rand1][rand2] !== null) {\n      [rand1, rand2] = getNewPosition(newGrid);\n    }\n    newGrid[rand1][rand2] = Math.random() > 0.9 ? 4 : 2;\n    return newGrid;\n  };\n\n  const boardMoved = (original, updated) => {\n    return JSON.stringify(updated) !== JSON.stringify(original) ? true : false;\n  };\n\n  function flatted(board) {\n    return [].concat.apply([], board);\n  }\n\n  const shiftLeft = arr => {\n    const result = arr\n      .filter(Boolean)\n      .concat([null, null, null, null])\n      .slice(0, 4);\n\n    for (let i = 0; i < arr.length; i++) {\n      if (result[i] && result[i + 1] && result[i] === result[i + 1]) {\n        result[i] *= 2;\n        result[i + 1] = null;\n        setScore(score + result[i]);\n      }\n    }\n    return result\n      .filter(Boolean)\n      .concat([null, null, null, null])\n      .slice(0, 4);\n  };\n\n  const handleLeft = (checkDead = true) => {\n    let oldData = cloneDeep(data);\n    if (win) {\n      setOverlay(true);\n      return;\n    }\n\n    let newData = cloneDeep(data).map(item => shiftLeft(item));\n    if (boardMoved(oldData, newData)) {\n      setHistory([...history, oldData]);\n      if (flatted(newData).includes(2048)) {\n        setWin(true);\n        setData(newData);\n        setOverlay(WIN)\n        return;\n      } else placeRandom(newData);\n    } else if (!flatted(oldData).includes(null) && checkDead && checkForGameOver(newData)) {\n      setOverlay(GAME_OVER)\n      setGameOver(true);\n    }\n    if (checkDead) {\n      setData(newData);\n    }\n    return newData;\n  };\n\n  const shiftRight = arr => {\n    arr = arr.filter(Boolean);\n    let result = [];\n\n    for (let i = arr.length - 1; i > 0; i--) {\n      if (arr[i] > 0 && arr[i - 1] === arr[i]) {\n        arr[i] *= 2;\n        arr[i - 1] = null;\n        setScore(score + arr[i]);\n      }\n    }\n    result = [null, null, null, null].concat(arr.filter(Boolean));\n    result = result.slice(result.length - 4);\n    return result;\n  };\n\n  const handleRight = (checkDead = true) => {\n    let oldData = data;\n    if (win) {\n      setOverlay(true);\n      return;\n    }\n\n    let newData = cloneDeep(data).map(item => shiftRight(item));\n    if (boardMoved(oldData, newData)) {\n      setHistory([...history, oldData]);\n      if (flatted(newData).includes(2048)) {\n        setWin(true);\n        setData(newData);\n        setOverlay(WIN)\n        return;\n      } else placeRandom(newData);\n    } else if (!flatted(oldData).includes(null) && checkDead && checkForGameOver(newData)) {\n      setOverlay(GAME_OVER)\n      setGameOver(true);\n    }\n    if (checkDead) {\n      setData(newData);\n    }\n    return newData\n  };\n\n  const handleUp = (checkDead = true) => {\n    let oldData = cloneDeep(data);\n    if (win) {\n      setOverlay(true);\n      return;\n    }\n\n    let newData = cloneDeep(data);\n    newData = rotateLeft(rotateRight(newData).map(item => shiftRight(item)));\n    if (boardMoved(oldData, newData)) {\n      setHistory([...history, oldData]);\n      if (flatted(newData).includes(2048)) {\n        setWin(true);\n        setData(newData);\n        setOverlay(WIN);\n        return\n      } else placeRandom(newData);\n    } else if (!flatted(oldData).includes(null) && checkDead && checkForGameOver(newData)) {\n      setOverlay(GAME_OVER);\n      setGameOver(true);\n    }\n    if (checkDead) {\n      setData(newData);\n    }\n    return newData;\n  }\n\n  const handleDown = (checkDead = true) => {\n    let oldData = cloneDeep(data);\n    if (win) {\n      setOverlay(true);\n      return;\n    }\n\n    let newData = cloneDeep(data);\n    newData = rotateLeft(rotateRight(newData).map(item => shiftLeft(item)));\n    if (boardMoved(oldData, newData)) {\n      setHistory([...history, oldData]);\n      if (flatted(newData).includes(2048)) {\n        setWin(true);\n        setData(newData);\n        setOverlay(WIN)\n        return;\n      } else placeRandom(newData);\n    } else if (!flatted(oldData).includes(null) && checkDead && checkForGameOver(newData)) {\n      setOverlay(GAME_OVER);\n      setGameOver(true);\n    }\n    if (checkDead) {\n      setData(newData);\n    }\n    return newData;\n  }\n\n  const handleKeyDown = (event) => {\n    switch (event.keyCode) {\n      case 38:\n        handleUp();\n        break;\n      case 40:\n        handleDown();\n        break;\n      case 37:\n        handleLeft();\n        break;\n      case 39:\n        handleRight();\n        break;\n      default:\n        return;\n    }\n  };\n\n  useEffect(() => {\n    window.addEventListener('keydown', handleKeyDown);\n\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n    };\n  });\n\n  const onClickNewGame = () => {\n    setScoreList([...scorelist, score]);\n    setHistory([]);\n    setGameOver(false);\n    setOverlay(PLAYING);\n    setRestart(true);\n    setScore(0);\n    setData(INITIAL_DATA);\n  }\n\n  const onClickKeepGoing = () => {\n    setOverlay(PLAYING);\n    setData(data);\n    setWin(false);\n  }\n\n  const checkForGameOver = data => {\n    let moves = [\n      boardMoved(data, handleUp(false)),\n      boardMoved(data, handleDown(false)),\n      boardMoved(data, handleRight(false)),\n      boardMoved(data, handleLeft(false))\n    ];\n    return moves.includes(true) ? false : true;\n  };\n\n  return (\n    <div>\n      <div className=\"App\">\n        {win || gameOver\n\n          ?\n\n          <Game\n            onClickNewGame={onClickNewGame}\n            overlay={overlay}\n            onClickKeepGoing={onClickKeepGoing} />\n          :\n          <>\n            <Board\n              data={data}\n              score={score}\n              onClickNewGame={onClickNewGame}\n              initBoard={initBoard}\n            />\n            <div className=\"app__contents\">\n\n            </div>\n          </>\n        }\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}